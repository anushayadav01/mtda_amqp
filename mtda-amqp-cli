#!/usr/bin/env python3

import pika

class MTDA_Application:

    def __init__(self):
        self.connection = pika.BlockingConnection(pika.URLParameters('amqp://admin:password@134.86.62.211:5672/%2F'))
        self.channel = self.connection.channel()
        result = self.channel.queue_declare(queue='', exclusive=True)
        self.callback_queue = result.method.queue
        self.channel.basic_consume(
            queue=self.callback_queue,
            on_message_callback=self.on_response,
            auto_ack=True)
        self.response = None
        self.corr_id = None
        

      def on_response(self, ch, method, props, body):
          if self.corr_id == props.correlation_id:
              self.response = body

      def call(self, n):
          self.response = None
          self.corr_id = str(uuid.uuid4())
          self.channel.basic_publish(
              exchange='',
              routing_key='mtda-amqp',
              properties=pika.BasicProperties(
                  reply_to=self.callback_queue,
                  correlation_id=self.corr_id,
            ),
            body=str(n))
          self.connection.process_data_events(time_limit=None)
          return self.response


mtda_rpc=MTDA_Application()
print(" [x] requesting target_on for mtda")
response=mtda_rpc.call("target_on")
print(" [.] Got %r" % response)

